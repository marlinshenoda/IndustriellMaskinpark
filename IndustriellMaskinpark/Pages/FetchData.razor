@using MaskinPark.Shared
@page "/fetchdata"
@inject NavigationManager Navigation

<PageTitle>Create Machine</PageTitle>
    <EditForm Model="@machine" OnValidSubmit="AddItem">
        <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="col-12">
            <div class="col-12 row">
            <label class="col-2 font-weight-bold">Type :</label>
            <InputText class="form-control col-3" @bind-Value="machine.Type"  />
            &nbsp;<ValidationMessage For="@(() => machine.Type)" />
        </div>
       <div class="col-12 row">
            <label class="col-2 font-weight-bold">Status :</label>
           @* <InputText class="form-control col-3" type="text" @bind-Value="@machine.Status" />*@
           <InputSelect class="form-control col-3" @bind-Value="machine.Status">
                @foreach (var value in Enum.GetValues<Status>())
                {
                    <option value="@value">@value</option>
                }
            </InputSelect>
@*            &nbsp;<ValidationMessage For="@(() => machine.Status)" />
*@        </div>
           <div class="col-12 row">
            <label class="col-2 font-weight-bold">Location :</label>
            <InputText class="form-control col-3" @bind-Value="machine.Location"  />
@*            &nbsp;<ValidationMessage For="@(() => machine.Location)" />
*@        </div>
             <div class="col-12 row">
            <label class="col-2 font-weight-bold">Date Time :</label>
            <InputDate class="form-control col-3" @bind-Value="machine.DataTime"  />
         @*   &nbsp;<ValidationMessage For="@(() => machine.DataTime)" />*@
        </div>
                   <br />
 
            <div class="form-group">
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            </div>
    </div>
     </EditForm>

@code {
    [Parameter]
    public List<Machine> Machine { get; set; } = new List<Machine>();
    [Inject]
    public IToDoClient ToDoClient { get; set; } = default!;

    private Machine machine = new Machine(){DataTime = DateTime.Now};


    //[Parameter]
    //public EventCallback<Machine> Add { get; set; }

    //public async Task OnAdd()
    //{
    //    await Add.InvokeAsync(machine);
    //}

    private async Task AddItem() {
        // var newItem = new CreateItem { Text = text };

        var createdItem = await ToDoClient.PostAsync(machine);

        if (createdItem != null)
            Machine.Add(createdItem);

        Navigation.NavigateTo("/");
    }

}
